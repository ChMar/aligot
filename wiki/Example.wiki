#summary Example of analysis

These examples assumed you downloaded the vanilla directory from svn trunk.

= TEA =

== Tracing ==

  * Let's analyze the program _vanilla/testBinaries/TEA.exe_. You should rapidly found the following function that seems to do some crypto stuff! 

<img src="http://aligot.googlecode.com/svn/img/TEA_IDA.png" height="500" >

Let's find if it is a known algorithm :)
  * Get the pintool _vanilla/pin2.12/aligotTracer.dll_
  * Collect the execution trace:
{{{
>pin -t aligotTracer.dll startA 401020 endA 40109F -- TEA.exe
df5ec153
6e089494
}}}

We specified the start and end addresses of the previous function with the arguments startA and endA. You could also collect a full trace of the program but the rest of the analysis is going to take a lot more time. Currently the tool is only suitable for such focus analysis.

  * You should then obtain the file trace.out that looks like this:
{{{
!SOT
401020!push ebp!RR_ebp_12ff7c_esp_12ff5c!WM_12ff58_4_12ff7c!WR_esp_12ff58
401021!mov ebp, esp!RR_esp_12ff58!WR_ebp_12ff58
401023!sub esp, 0x14!RR_esp_12ff58!WR_esp_12ff44
...
}}}
== Extraction of possible crypto algorithms based on loops ==

  * Go into vanilla/extraction and launch:
{{{
> python main.py trace.out
> Aligot extraction module
> Start: 2012-09-27 15:03:32.489000
---------------------------

> Loop detection... Done
> Garbage collector for invalid loops... Done (47 loops suppressed)
> Loop I/O... Done
> Garbage collector for useless loops (no I/O)... Done (0 loops suppressed)
> Loop data flow graph building... Done
> Garbage collector for invalid LDFs... Done
> Loop data flow I/O building... Done
> Garbage collector for useless LDFs... Done
> Assigning values to I/O memory parameters... Done
> Dumping results... Done
> Producing graph... Done

---------------------------
> End: 2012-09-27 15:03:32.704000
}}}

You should then obtain three files:
  # finalGraph0.png, a graph representing one possible crypto algorithm extracted from the trace.
  # finalGraph0.dot, same graph in dot format.
  # result.txt, contains the input-output values for each extracted algorithm.

This last file is the one we are going to use in the next phase.

Note: For a better understanding of the tool, we can check:
  * "--debug_graph" to produce another graph describing more precisely the loops extracted from the execution trace. In this case:
<img src="http://aligot.googlecode.com/svn/img/TEA_dg.png" height="500" >

We clearly see our loop, with its arguments.

  *  

debug graph, virer display du loop storage...