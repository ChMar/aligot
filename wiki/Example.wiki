#summary Example of analysis

These examples assumed you downloaded the vanilla directory from svn trunk.

= TEA =

== Tracing ==

  * Let's analyze the program: vanilla/testBinaries/TEA_Od.exe. You should rapidly found the following function that seems to do some crypto weird stuff! 

<img src="http://aligot.googlecode.com/svn/img/TEA_Od_IDA.png" height="500" >

Let's find if it is a known algorithm :)
  * Get the pintool: vanilla/pin2.12/aligotTracer.dll
  * Collect the execution trace:
{{{
>pin -t aligotTracer.dll startA 401020 endA 40109F -- TEA_Od.exe
df5ec153
6e089494
}}}

We specified the start and end addresses of the previous function with the arguments startA and endA. You could also collect a full trace of the program but the rest of the analysis is going to take a lot more time. Currently the tool is only suitable for such focus analysis.

  * You should then obtain the file trace.out that looks like this:
{{{
!SOT
401020!push ebp!RR_ebp_12ff7c_esp_12ff5c!WM_12ff58_4_12ff7c!WR_esp_12ff58
401021!mov ebp, esp!RR_esp_12ff58!WR_ebp_12ff58
401023!sub esp, 0x14!RR_esp_12ff58!WR_esp_12ff44
...
}}}
== Extraction of possible crypto algorithms based on loops ==

  * Go into vanilla/extraction and launch:
{{{
python main.py trace.out
}}}