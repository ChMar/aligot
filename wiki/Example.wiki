#summary Example of analysis

These examples assumed you downloaded the vanilla directory from svn trunk.

= TEA =

== Preliminary analysis ==

Let's take a look at *vanilla/testBinaries/TEA.exe*. You should rapidly found the following function that seems to do some magic stuff:

<img src="http://aligot.googlecode.com/svn/img/TEA_IDA.png" height="500" >

Let's check if it is a known crypto algorithm :)

== Tracing ==
  * Get the pintool *vanilla/pin2.12/aligotTracer.dll*
  * Collect the execution trace:

{{{
<pre>
>pin -t aligotTracer.dll startA 401020 endA 40109F -- TEA.exe
Input text:
123456789abcdef
Key:
deadbee1deadbee2deadbee3deadbee4
Output text:
df5ec1536e089494
<pre>
}}}


We specified the start and end addresses of the previous function with the arguments *startA* and *endA*. 

_Note: You could also collect a full trace of the program but the rest of the analysis is going to take a lot more time. Currently the tool is only suitable for such focus analysis._

  * You should then obtain the file *trace.out* that looks like this:
{{{
!SOT
401020!push ebp!RR_ebp_12ff7c_esp_12ff5c!WM_12ff58_4_12ff7c!WR_esp_12ff58
401021!mov ebp, esp!RR_esp_12ff58!WR_ebp_12ff58
401023!sub esp, 0x14!RR_esp_12ff58!WR_esp_12ff44
...
}}}
== Extraction of possible crypto algorithms ==

  * Go into *vanilla/extraction* and launch:
{{{
> python main.py trace.out
> Aligot extraction module
> Start: 2012-09-27 15:03:32.489000
---------------------------

> Loop detection... Done
> Garbage collector for invalid loops... Done (47 loops suppressed)
> Loop I/O... Done
> Garbage collector for useless loops (no I/O)... Done (0 loops suppressed)
> Loop data flow graph building... Done
> Garbage collector for invalid LDFs... Done
> Loop data flow I/O building... Done
> Garbage collector for useless LDFs... Done
> Assigning values to I/O memory parameters... Done
> Dumping results... Done
> Producing graph... Done

---------------------------
> End: 2012-09-27 15:03:32.704000
}}}

You should then obtain three files:
  # *finalGraph0.png*, a graph representing one possible crypto algorithm extracted from the trace.
  # *finalGraph0.dot*, same graph in dot format.
  # *result.txt*, contains the input-output values for each extracted algorithm.

This last file is the one we are going to use in the next phase.

_Note: For a better understanding of the tool, we can check:
  * "--debug_graph" to produce another graph describing more precisely the loops extracted from the execution trace. In this case:
<img src="http://aligot.googlecode.com/svn/img/TEA_dg.png" height="500" >

_We clearly see our loop, with its arguments._

  * _"--debug_mode" to display every step of the loop detection algorithm._

== Identification ==

Coming soon.

= RC4 =

== Preliminary analysis ==

== Tracing ==

{{{
>pin -t aligotTracer.
dll startA 401060 endA 40159A -- RC4.exe
Key:
SuperKeyIsASuperKey
Plaintext:
SuperPlainMessageABaseDeTrompette
Encrypted text:
d3e852f160d60dd627d66860e97148f5
}}}

== Extraction of possible crypto algorithms ==

  * Go into *vanilla/extraction* and launch:
{{{
> Aligot extraction module
> Start: 2012-09-27 16:24:01.554000
---------------------------

> Loop detection... Done
> Garbage collector for invalid loops... Done (70 loops suppressed)
> Loop I/O... Done
> Garbage collector for useless loops (no I/O)... Done (0 loops suppressed)
> Loop data flow graph building... Done
> Garbage collector for invalid LDFs... Done
> Loop data flow I/O building... Done
> Garbage collector for useless LDFs... Done
> Assigning values to I/O memory parameters... Done
> Dumping results... Done
> Producing graph... Done

---------------------------
> End: 2012-09-27 16:24:02.611000
}}}

== Identification ==

Coming soon.